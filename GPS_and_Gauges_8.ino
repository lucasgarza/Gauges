#include <TimerOne.h>
#include <Adafruit_GPS.h>
#include "U8glib.h"
#include <Wire.h>
#include <TinyGPS++.h>

#include <SoftwareSerial.h>


#define MUX_Address 0x70 // TCA9548A Encoders address

U8GLIB_SH1106_128X64 u8gB(U8G_I2C_OPT_NONE); 
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE|U8G_I2C_OPT_DEV_0); // SW SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9, Res = 12
                                                // For OLED display with SH1106 driver. If you use another display,
                                                // then please check the u8glib documentation and website at
                                                // https://github.com/olikraus/u8glib

int xmax=128;                                   // max length x-axis
int ymax=62;                                    // max length y-axis
int xcenter=xmax/2;                             // center of x-axis
int ycenter=ymax/2+10;                          // center of y-axis
int arc=ymax/2;                            
int angle=0;                                  
char* label[] = {"LOAD","COOLANT","INTAKE", "V"};    // some custom gauge labels
int labelXpos[] = {53, 45, 49, 0};                     // predefined x-position of a gauge label
#define potmeterPin A1                                  // simulate analogue value with potentiometer
int p, m;
float w;
u8g_uint_t xx=0;
int frame = 0;
uint8_t t=0;         // Port selection (0...7)
int gpsFlag;
long tmr;
String NMEA="";
char c2;
char c;
String GPRMC_ONLY = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";
String UPDATE_10_sec = "$PMTK220,10000*2F\r\n";
char speed[3];
char satsBuf[16];
float speed1;
int speed_round;
char* spinner = "/-\\|";
byte screenRefreshSpinnerPos = 0;
byte gpsUpdateSpinnerPos = 0;
char psi [4];
int psi1 =0;
char heading[3];

//int analogInput = 0;
float vout = 0.0;
float vin = 0.0;
char volts [6];
float R1 = 100000.0; // resistance of R1 (100K)
float R2 = 10000.0; // resistance of R2 (10K)
int value = 0;
int a[5] = {};

// initialize the variable to increment the 
int largPos = 0;

int sensorVal=0;

//Water temp stuff
char water[4];
int Vo;
float R1a = 10000;// resistance of R1a (10K)
float logR2, R2a, T;
//float d1 = 3.481515861e-03, d2 = -2.206377112e-04, d3 = 35.05773575e-07;
float d1 = 2.571202905e-03, d2 = -0.4402423056e-04, d3 = 9.838653961e-07; // SING F LTD Thermostat https://www.thinksrs.com/downloads/programs/Therm%20Calc/NTCCalibrator/NTCcalculator.htm




// The TinyGPS++ object
TinyGPSPlus gps;


SoftwareSerial GPSSerial(10,11);
//#define GPSSerial Serial;

const unsigned char oil[] PROGMEM = { 
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xf8,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xf0,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xe0,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xc0,0x80,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0x81,0xf8,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0x83,0xff,0x80,0x03,0x80,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xfc,0x7f,0xff
,0xff,0x01,0xff,0xfc,0x03,0x80,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0x80,0x1f,0xff
,0xfe,0x00,0x1f,0xff,0x83,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x07,0xff
,0xff,0x80,0x01,0xff,0x83,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0x80,0x0f,0x01,0xff
,0xff,0xfc,0x00,0x0f,0x80,0x00,0x00,0x00,0x00,0xff,0xff,0xf8,0x00,0x7f,0xc7,0xff
,0xff,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0x00,0x01,0xff,0xff,0xff
,0xff,0xff,0xfe,0x00,0x03,0xff,0xff,0xff,0xf8,0x1f,0xf0,0x00,0x07,0xff,0xff,0xff
,0xff,0xff,0xff,0xe0,0x03,0xff,0xff,0xff,0xfc,0x07,0x00,0x00,0x0f,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0x03,0xff,0xff,0xff,0xff,0x00,0x00,0xf0,0x3f,0xff,0xf3,0xff
,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0x80,0x0f,0xc0,0xff,0xff,0xe1,0xff
,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0xe1,0xff,0x01,0xff,0xff,0xc0,0xff
,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0xff,0xfe,0x07,0xff,0xff,0x80,0x7f
,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0xff,0xf8,0x0f,0xff,0xff,0x00,0x7f
,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0xff,0xe0,0x3f,0xff,0xff,0x00,0x3f
,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0xff,0xc0,0xff,0xff,0xff,0x80,0x7f
,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0xff,0x01,0xff,0xff,0xff,0xe1,0xff
,0xff,0xff,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0xfe,0x07,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
};

const unsigned char oilSmall[] PROGMEM = { 
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00
,0x03,0xe0,0x00,0x00,0x00,0x00,0x00,0x00
,0x03,0xf8,0x00,0x00,0x00,0x00,0x00,0x00
,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00
,0x06,0x3f,0xc7,0xff,0x00,0x00,0x00,0x00
,0x0e,0x07,0xef,0xff,0x00,0x00,0x01,0x80
,0x0e,0x01,0xef,0xff,0x00,0x00,0x07,0xc0
,0x1f,0xc0,0xe0,0xf0,0x00,0x00,0x3f,0xe0
,0x07,0xf0,0xe0,0xf0,0x00,0x00,0xfc,0xe0
,0x01,0xfc,0xff,0xff,0xf0,0x03,0xf0,0x40
,0x00,0x7f,0xff,0xff,0xf8,0x0f,0xf0,0x00
,0x00,0x1f,0xe0,0x00,0x3c,0x3f,0xe0,0x00
,0x00,0x07,0xe0,0x00,0x1c,0xff,0xc0,0x00
,0x00,0x00,0xe0,0x00,0x0f,0xf3,0x80,0x20
,0x00,0x00,0xe0,0x00,0x07,0xc7,0x00,0x70
,0x00,0x00,0xe0,0x00,0x07,0x0e,0x00,0x70
,0x00,0x00,0xe0,0x00,0x00,0x1e,0x00,0xf0
,0x00,0x00,0xe0,0x00,0x00,0x1c,0x00,0xf8
,0x00,0x00,0xe0,0x00,0x00,0x38,0x00,0xf8
,0x00,0x00,0xe0,0x00,0x00,0x70,0x00,0xf8
,0x00,0x00,0xe0,0x00,0x00,0xe0,0x00,0x60
,0x00,0x00,0xe0,0x00,0x01,0xe0,0x00,0x00
,0x00,0x00,0xff,0xff,0xff,0xc0,0x00,0x00
,0x00,0x00,0xff,0xff,0xff,0x80,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};

const unsigned char pontiac[] PROGMEM = {
 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xc0,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xe0,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xe0,0x00,0x07,0xc0,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0x80,0x07,0xff,0xff,0xe0,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xfc,0x00,0xff,0xff,0xff,0xff,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xf0,0x07,0xff,0xff,0xff,0xff,0xe0,0x0f,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xc0,0x3f,0xff,0xff,0xff,0xff,0xfc,0x07,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0x80,0xff,0xfc,0x00,0x7f,0xff,0xff,0x01,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xfe,0x03,0xff,0xf0,0x00,0x07,0xff,0xff,0xc0,0x7f,0xff,0xff,0xff,0xff,0xff
,0xff,0xf8,0x0f,0xff,0xc0,0x00,0x00,0x1f,0xff,0xe0,0x3f,0xff,0xff,0xff,0xff,0xff
,0xff,0xf0,0x1f,0xff,0x80,0x00,0x00,0x01,0xff,0xf8,0x1f,0xff,0xff,0xff,0xff,0xff
,0xff,0xe0,0x7f,0xfe,0x00,0x00,0x00,0x00,0x7f,0xfc,0x0f,0xff,0xff,0xff,0xff,0xff
,0xff,0xc0,0xff,0xfc,0x00,0x00,0x00,0x00,0x0f,0xff,0x07,0xff,0xff,0xff,0xff,0xff
,0xff,0x81,0xff,0xf0,0x00,0x00,0x00,0x00,0x01,0xff,0x83,0xff,0xff,0xff,0xff,0xff
,0xff,0x03,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x3f,0xc1,0xff,0xff,0xff,0xff,0xff
,0xfe,0x07,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x01,0xc0,0xff,0xff,0xff,0xff,0xff
,0xfe,0x0f,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xff
,0xfc,0x1f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0xff,0xff,0xff
,0xf8,0x3f,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0xff
,0xf8,0x3f,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xff
,0xf0,0x7f,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff
,0xf0,0x7f,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03
,0xf0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03
,0xe0,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07
,0xe0,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0xe1,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f
,0xc1,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff
,0xc1,0xff,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff
,0xc1,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x1f,0xff
,0xc1,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x03,0xfc,0x00,0x00,0x00,0x00,0x3f,0xff
,0xc1,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xc0,0x00,0x00,0x01,0xff,0xff
,0xc1,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0xf8,0x00,0x00,0x07,0xff,0xff
,0xc1,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0xff,0x00,0x00,0x3f,0xff,0xff
,0xc1,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0x00,0x00,0x7f,0xff,0xff
,0xc1,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0x07,0xff,0xff,0xff,0xff
,0xc1,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0x07,0xff,0xff,0xff,0xff
,0xe1,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0x0f,0xff,0xff,0xff,0xff
,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xfe,0x0f,0xff,0xff,0xff,0xff
,0xe0,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xfe,0x1f,0xff,0xff,0xff,0xff
,0xf0,0x7f,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xfc,0x1f,0xff,0xff,0xff,0xff
,0xf0,0x7f,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x07,0xfc,0x3f,0xff,0xff,0xff,0xff
,0xf8,0x3f,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x0f,0xf8,0x3f,0xff,0xff,0xff,0xff
,0xf8,0x3f,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,0x7f,0xf0,0x7f,0xff,0xff,0xff,0xff
,0xfc,0x1f,0xff,0xff,0xfe,0x00,0x00,0x00,0x03,0xff,0xe0,0xff,0xff,0xff,0xff,0xff
,0xfc,0x0f,0xff,0xff,0xff,0x00,0x00,0x00,0x1f,0xff,0xe0,0xff,0xff,0xff,0xff,0xff
,0xfe,0x07,0xff,0xff,0xff,0x00,0x00,0x00,0x7f,0xff,0xc1,0xff,0xff,0xff,0xff,0xff
,0xff,0x03,0xff,0xff,0xff,0x80,0x00,0x01,0xff,0xff,0x83,0xff,0xff,0xff,0xff,0xff
,0xff,0x81,0xff,0xff,0xff,0x80,0x00,0x07,0xff,0xfe,0x07,0xff,0xff,0xff,0xff,0xff
,0xff,0xc0,0xff,0xff,0xff,0x80,0x00,0x3f,0xff,0xfc,0x0f,0xff,0xff,0xff,0xff,0xff
,0xff,0xe0,0x7f,0xff,0xff,0x80,0x00,0xff,0xff,0xf8,0x1f,0xff,0xff,0xff,0xff,0xff
,0xff,0xf8,0x1f,0xff,0xff,0xc0,0x01,0xff,0xff,0xe0,0x7f,0xff,0xff,0xff,0xff,0xff
,0xff,0xfc,0x07,0xff,0xff,0xc0,0x07,0xff,0xff,0x80,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xfe,0x01,0xff,0xff,0xc0,0x1f,0xff,0xfe,0x03,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0x80,0x7f,0xff,0xc0,0x7f,0xff,0xf8,0x07,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xe0,0x1f,0xff,0xc1,0xff,0xff,0xe0,0x1f,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xf8,0x03,0xff,0xc7,0xff,0xfe,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xfe,0x00,0x3f,0xff,0xff,0xe0,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xc0,0x01,0xff,0xf8,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
};

void draw()
{
  tcaselect(0);
  u8g.firstPage();
  do{
    // draw splash page
    u8g.drawBitmapP( 0, 0, 16, 64, pontiac);
  } while(u8g.nextPage());
  
  tcaselect(1);
  u8g.firstPage();
  do{
    // draw splash page
    u8g.drawBitmapP( 0, 0, 16, 64, pontiac);
  } while(u8g.nextPage());
  
  tcaselect(2);
  u8gB.firstPage();
  do{
    // draw splash page
    u8gB.drawBitmapP( 35, 0, 8, 64, oilSmall);
  } while(u8gB.nextPage());
  
  tcaselect(3);
  u8gB.firstPage();
  do{
    // draw splash page
    u8gB.drawBitmapP( 0, 0, 16, 64, pontiac);
  } while(u8gB.nextPage());
}

// ------------------------------------------------- void gauge(Volts) ------------------------------------------
void gauge(uint8_t angle) {
  dtostrf(w, 0, 1,volts);
  u8g.setFont(u8g_font_courB24);
  //u8g.drawStr( 6, 38, "V");
  u8g.drawStr( 28, 36, volts);
  //u8g.drawStr( 85, 35, ".");
  //u8g.drawStr( 100, 35, "5");
}

void gaugeWater() {
  u8g.setFont(u8g_font_courB24); 
  u8g.drawStr( 25, 42, water);
  //u8g.drawStr( 35, 42, "180");
 
}



void gaugeSpeed() {
  //u8g.setContrast(255); 
  //u8g.setScale2x2();
  sprintf(satsBuf, "%c %c %d", spinner[screenRefreshSpinnerPos], spinner[gpsUpdateSpinnerPos], gps.satellites.value());
  u8g.setFont(u8g_font_courB24);
  u8g.drawStr( 60, 50, speed);
 // u8g.setFont(u8g_font_courB10);
//  u8g.drawStr( 0, 20, heading);
  //u8g.undoScale();
  u8g.setFont(u8g_font_fur11);
  u8g.drawStr( 85, 12, satsBuf);
}

// ------------------------------------------------- void gauge(OIL) ------------------------------------------

void gaugePSI() {
  u8gB.setFont(u8g_font_courB24);
    //u8g.setFontPosBaseline();
   // u8g.setFont(u8g_font_unifont);
    // u8g.setColorIndex(0);
    //u8g.drawStr( 40, 50, psi);
     //u8g.drawStr( 0, 40, "Hello World!");
  //u8g.setFont(u8g_font_fur11);
                                      // u8g.drawStr( 70, 60, "PSI");

  
   //u8gB.drawFrame (0,15,120,30); // create an empty rectangle (frame) with the values ​​(x, y, width, height) 
   //u8gB.drawBox (0,0, psi1, 64); 
  //  u8g.setColorIndex(1);
  // u8g.drawBox (0,0, psi1, 64); 

  // u8g.setColorIndex(0);
  u8gB.drawStr( 25, 50, psi);
  //u8gB.drawBitmapP( 0, 0, 8, 64, oilSmall);
    //u8g.drawBitmapP( 0, 0, 16, 64, pontiac);
    // u8g.setColorIndex(1);



   
}


// Initialize I2C buses using TCA9548A I2C Multiplexer
void tcaselect(uint8_t i2c_bus) {
    if (i2c_bus > 7) return;
    Wire.beginTransmission(MUX_Address);
    Wire.write(1 << i2c_bus);
    Wire.endTransmission(); 
}




void setup()  
{
    
  // connect at 115200 so we can read the GPS fast enough and echo without dropping chars
  // also spit it out
  Serial.begin(115200);
  Serial.println("Adafruit GPS library basic test!");

  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  //GPS.begin(9600);
  GPSSerial.begin(9600);
  delay(100);
  GPSSerial.print(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  delay(100);
  GPSSerial.print(PMTK_SET_NMEA_UPDATE_1HZ);

  Timer1.initialize(1000);
  Timer1.attachInterrupt(readGPS);
  
  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  // uncomment this line to turn on only the "minimum recommended" data
//  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time
  
  // Set the update rate
 // GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);   // 1 Hz update rate
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz

  // Request updates on antenna status, comment out to keep quiet
  //GPS.sendCommand(PGCMD_ANTENNA);

  //delay(1000);
   // Serial.println(mySerial.println(PMTK_Q_RELEASE));
  // Ask for firmware version
 // mySerial.println(PMTK_Q_RELEASE);

  Wire.begin();
  DisplayInit(); // Initialize the displays 
  draw();
  delay(3000);
  //pinMode(analogInput, INPUT);

  
}


// Initialize the displays 
void DisplayInit(){
    for (int i = 0; i < 7; i++) {  
      tcaselect(i);   // Loop through each connected displays on the I2C buses  
      u8g.firstPage();
      do {
        u8g.begin();  // Initialize display
       } while( u8g.nextPage() );
    }  
}

void loop()                     // run over and over again
{ 
 
  if(gpsFlag ==1){
    Timer1.stop();
    char *text = NMEA.c_str();
    while (*text){
      if (gps.encode(*text++)){
        displayInfo();
        }
     }
    //NMEA.trim();
    //Serial.println(NMEA);
    NMEA="";
    gpsFlag=0;
    //gpsUpdateSpinnerPos = (gpsUpdateSpinnerPos + 1) % 4;
    Timer1.restart();
  }

  for (t=0; t<4; t++) {
    tcaselect(t);
    if (t ==0){   
      if (screenRefreshSpinnerPos ==0){
      //lcd.print("DC Voltmeter");
      // read the value at analog input
      value = analogRead(A1);
      vout = (value * 5.0) / 1024.0;
      vin = vout / (R2 / (R1 + R2));
    //  Serial.print("Sensor Value: ");
    //  Serial.println(value);

     // Serial.print("Vout Value: ");
     // Serial.println(vout);

     // Serial.print("Volt Value: ");
    //  Serial.println(vin);
      // show needle and dial
     // xx = vin;                                // 135 = zero position, 180 = just before middle, 0 = middle, 45 = max
      w= vin;
  
     
      {
        u8g.firstPage(); 
        do {             
          gauge(xx);
        }
         while( u8g.nextPage() );
      }
      }
    }else if(t==1){  
       //sprintf(heading, "%s",  gps.cardinal(gps.course.value()));
          {    
          u8g.firstPage(); 
          do {             
            gaugeSpeed();
          }
          while( u8g.nextPage() );
        }
    
  }else if (t==2){
    if (screenRefreshSpinnerPos ==1){
     
      float AverageValue = 0;
      int MeasurementsToAverage = 32;
      for(int i = 0; i < MeasurementsToAverage; ++i)
      {
          AverageValue += analogRead(A0);
          delay(1);
      }
      AverageValue /= MeasurementsToAverage;
      sensorVal = AverageValue;
 
        Serial.println("Sensor Value: ");
       Serial.println(sensorVal);

        

     // psi1 = ((sensorVal-102)*100)/818;
    //  psi1 = ((sensorVal-102.4)*100)/921.6;
     psi1 = ((sensorVal-102.4)*100)/785;


      if (psi1 < 0){
        psi1=0;
      }
      float voltage = (sensorVal*5.0)/1024.0;
      
      Serial.print("voltage : ");
      Serial.println(voltage);
      
      dtostrf(psi1, 3, 0,psi); 

      {
        u8gB.firstPage(); 
        do {             
         gaugePSI();
        }
        while( u8gB.nextPage() );
      }
    }
    
    }else if (t==3){
    // Water Temperature 
    Vo=analogRead(A3);
    R2a = R1a * (1023.0 / (float)Vo - 1.0);
    logR2 = log(R2a);
    T = (1.0 / (d1 + d2*logR2 + d3*logR2*logR2*logR2));
    T = T - 273.15;
    T = (T * 9.0)/ 5.0 + 32.0; 

    //Serial.print("Temperature: "); 
    //Serial.print(T);
    //Serial.println(" F"); 

    //Serial.print("Resistance: "); 
    //Serial.print(R2a);
    //Serial.println(" Ohms"); 

     dtostrf(T, 3, 0,water);

     {
        u8g.firstPage(); 
        do {  
          gaugeWater();           
        }
         while( u8g.nextPage() );
      }
     
    }

  
  }
  screenRefreshSpinnerPos = (screenRefreshSpinnerPos + 1) % 4;
}

void readGPS(){
  if (GPSSerial.available()>0){
    c2=GPSSerial.read();
    NMEA.concat(c2);
  }
  if(c2=='\r'){
    gpsFlag=1;
  }
}


void displayInfo()
{
  if (gps.speed.isUpdated())
  {
   // Serial.print(F("SPEED      Fix Age="));
    //Serial.print(gps.speed.age());
    //Serial.print(F("ms Raw="));
   // Serial.print(gps.speed.value());
    //Serial.print(F(" Knots="));
    //Serial.print(gps.speed.knots());
    //Serial.print(F(" MPH="));
    //Serial.print(gps.speed.mph());
    //Serial.print(F(" m/s="));
    //Serial.print(gps.speed.mps());
    //Serial.print(F(" km/s="));
    //Serial.println(gps.speed.kmph());
    speed1 = gps.speed.mph();   //Change this to display other speeds( kmph, mph);
    speed_round =round(speed1);
    //dtostrf(speed_round, 6, 0,speed); 
    itoa(speed_round, speed, 10);
    //Serial.println(gps.cardinal(gps.course.value()));
    //sprintf(heading, "%s",  gps.cardinal(gps.course.value()));
   
    //Serial.println(gps.satellites.value());
    //sprintf(satsBuf, "%c %c %d", spinner[screenRefreshSpinnerPos], spinner[gpsUpdateSpinnerPos], gps.satellites.value());
    //sprintf(speed, "%i", speed1);
     //Serial.println(speed);
  }
  else
  {
  // Serial.print(F("INVALID"));
  }
   //Serial.println();
}
